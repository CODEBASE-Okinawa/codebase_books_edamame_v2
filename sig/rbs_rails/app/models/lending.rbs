class Lending < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[Lending, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def user_id: () -> Integer

    def user_id=: (Integer) -> Integer

    def user_id?: () -> bool

    def user_id_changed?: () -> bool

    def user_id_change: () -> [ Integer?, Integer? ]

    def user_id_will_change!: () -> void

    def user_id_was: () -> Integer?

    def user_id_previously_changed?: () -> bool

    def user_id_previous_change: () -> Array[Integer?]?

    def user_id_previously_was: () -> Integer?

    def user_id_before_last_save: () -> Integer?

    def user_id_change_to_be_saved: () -> Array[Integer?]?

    def user_id_in_database: () -> Integer?

    def saved_change_to_user_id: () -> Array[Integer?]?

    def saved_change_to_user_id?: () -> bool

    def will_save_change_to_user_id?: () -> bool

    def restore_user_id!: () -> void

    def clear_user_id_change: () -> void

    def book_id: () -> Integer

    def book_id=: (Integer) -> Integer

    def book_id?: () -> bool

    def book_id_changed?: () -> bool

    def book_id_change: () -> [ Integer?, Integer? ]

    def book_id_will_change!: () -> void

    def book_id_was: () -> Integer?

    def book_id_previously_changed?: () -> bool

    def book_id_previous_change: () -> Array[Integer?]?

    def book_id_previously_was: () -> Integer?

    def book_id_before_last_save: () -> Integer?

    def book_id_change_to_be_saved: () -> Array[Integer?]?

    def book_id_in_database: () -> Integer?

    def saved_change_to_book_id: () -> Array[Integer?]?

    def saved_change_to_book_id?: () -> bool

    def will_save_change_to_book_id?: () -> bool

    def restore_book_id!: () -> void

    def clear_book_id_change: () -> void

    def return_at: () -> Date

    def return_at=: (Date) -> Date

    def return_at?: () -> bool

    def return_at_changed?: () -> bool

    def return_at_change: () -> [ Date?, Date? ]

    def return_at_will_change!: () -> void

    def return_at_was: () -> Date?

    def return_at_previously_changed?: () -> bool

    def return_at_previous_change: () -> Array[Date?]?

    def return_at_previously_was: () -> Date?

    def return_at_before_last_save: () -> Date?

    def return_at_change_to_be_saved: () -> Array[Date?]?

    def return_at_in_database: () -> Date?

    def saved_change_to_return_at: () -> Array[Date?]?

    def saved_change_to_return_at?: () -> bool

    def will_save_change_to_return_at?: () -> bool

    def restore_return_at!: () -> void

    def clear_return_at_change: () -> void

    def return_status: () -> bool

    def return_status=: (bool) -> bool

    def return_status?: () -> bool

    def return_status_changed?: () -> bool

    def return_status_change: () -> [ bool?, bool? ]

    def return_status_will_change!: () -> void

    def return_status_was: () -> bool?

    def return_status_previously_changed?: () -> bool

    def return_status_previous_change: () -> Array[bool?]?

    def return_status_previously_was: () -> bool?

    def return_status_before_last_save: () -> bool?

    def return_status_change_to_be_saved: () -> Array[bool?]?

    def return_status_in_database: () -> bool?

    def saved_change_to_return_status: () -> Array[bool?]?

    def saved_change_to_return_status?: () -> bool

    def will_save_change_to_return_status?: () -> bool

    def restore_return_status!: () -> void

    def clear_return_status_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  def user: () -> User
  def user=: (User?) -> User?
  def reload_user: () -> User?
  def build_user: (untyped) -> User
  def create_user: (untyped) -> User
  def create_user!: (untyped) -> User
  def book: () -> Book
  def book=: (Book?) -> Book?
  def reload_book: () -> Book?
  def build_book: (untyped) -> Book
  def create_book: (untyped) -> Book
  def create_book!: (untyped) -> Book
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  def self.not_yet_returned: () -> ActiveRecord_Relation

  module GeneratedRelationMethods
    def not_yet_returned: () -> ActiveRecord_Relation
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Lending, Integer]
    include Enumerable[Lending]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Lending, Integer]
  end
end
